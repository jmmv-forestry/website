#! /bin/sh

ProgName="${0##*/}"

# Static package settings.
SRCDIR="$(cd "$(dirname "${0}")" && pwd -P)"

# Dynamically-configured settings.
CLEANFILES=
DISTCLEANFILES=
HUGO=
LIVE_REPOSITORY=

# List of variables exposed to the Makefile.
MK_VARS="CLEANFILES DISTCLEANFILES HUGO LIVE_REPOSITORY"

info() {
    echo "${ProgName}: I: ${@}" 1>&2
}

err() {
    echo "${ProgName}: E: ${@}" 1>&2
    exit 1
}

find_prog() {
    local prog="${1}"; shift

    local oldifs="${IFS}"
    IFS=:
    set -- ${PATH}
    IFS="${oldifs}"

    while [ ${#} -gt 0 ]; do
        if [ -x "${1}/${prog}" ]; then
            echo "${1}/${prog}"
            return 0
        else
            shift
        fi
    done
    return 1
}

find_progs() {
    while [ ${#} -gt 0 ]; do
        if find_prog "${1}"; then
            return 0
        else
            shift
        fi
    done
    return 1
}

set_hugo() {
    local user_override="${1}"; shift

    if [ -n "${user_override}" ]; then
        [ -e "${user_override}" ] || err "hugo not found in" \
            "${user_override}; bogus argument to --hugo?"
        HUGO="${user_override}"
    else
        local hugo="$(find_progs hugo)"
        [ -n "${hugo}" ] || err "Cannot find hugo in path; pass" \
            "--hugo=/path/to/hugo to configure"
        HUGO="${hugo}"
    fi

    info "Using Hugo from: ${HUGO}"
}

set_live_repository() {
    local user_override="${1}"; shift

    if [ -n "${user_override}" ]; then
        LIVE_REPOSITORY="${user_override}"
    else
        LIVE_REPOSITORY=https://github.com/jmmv/jmmv.github.io
    fi

    info "Will publish to: ${LIVE_REPOSITORY}"
}

generate_makefile() {
    local src="${1}"; shift
    local dest="${1}"; shift

    info "Generating ${dest}"
    echo "# AUTOMATICALLY GENERATED; DO NOT EDIT!" >"${dest}.tmp"
    for var in ${MK_VARS}; do
        local value
        eval "value=\"\$${var}\""
        echo "${var} = ${value}" >>"${dest}.tmp"
    done
    cat "${src}" >>"${dest}.tmp"
    mv "${dest}.tmp" "${dest}"
}

main() {
    cd "${SRCDIR}"

    local hugo=
    local live_repository=
    for arg in "${@}"; do
        case "${arg}" in
            --hugo=*) hugo="${arg#*=}" ;;
            --live-repository=*) live_repository="${arg#*=}" ;;
            *) err "Unknown argument ${arg}" ;;
        esac
    done

    CLEANFILES=_site
    set_hugo "${hugo}"

    set_live_repository "${live_repository}"

    DISTCLEANFILES="${DISTCLEANFILES} Makefile"
    generate_makefile Makefile.in Makefile
}

main "${@}"
